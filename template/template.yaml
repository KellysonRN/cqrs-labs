apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: cqrs-labs-template
  title: CQRS .Net Template
  description: Create a webapi sample using C#, CQRS, Dapper e EF6
spec:
  owner: KellysonRN
  type: service
  parameters:
    - title: Provide some information
      required:
        - component_id
        - description
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          pattern: ^([a-zA-Z][a-zA-Z0-9]*)*$
          maxLength: 40
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: Unique name of the component
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - KellysonRN
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./template
        values:
          name: ${{ parameters.component_id }}
          owner: ${{ parameters.owner }}
          description: ${{ parameters.description }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        defaultBranch: main
        allowedHosts: ['github.com']
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}
        topics: ["dotnet", "cqrs", "dapper", "efcore"]

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
